package com.kp.first.config;

import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.config.AbstractMongoConfiguration;
import org.springframework.data.mongodb.core.MongoClientFactoryBean;
import org.springframework.stereotype.Component;

@Configuration public class MongoDBConfig extends AbstractMongoConfiguration {

    /* Connection properties. */
    final static String DB_HOST = "ds263408.mlab.com";
    final static Integer DB_PORT = 63408;
    final static String DB_NAME = "dbone";
    final static String DB_USERNAME = "kolgepratik";
    final static String DB_PASSWORD = "kolgepratik";

    // This property will be injected by Spring IOC.
    @Autowired private Mongo mongo;

    /* Implement abstract methods */
    @Override protected String getDatabaseName() {
        return DB_NAME;
    }

    @Override public MongoClient mongoClient() {
        return (MongoClient) this.mongo;
    }
}

/**
 * Beans generated by the Application for configuration.
 * These bean will be used by Spring to configure MongoDB connection.
 */
@Configuration
class MongoDBConfigBean {

    @Bean
    public MongoClientFactoryBean getMongoClientFactoryBean() throws Exception {
        // mongodb://kolgepratik:kolgepratik@ds263408.mlab.com:63408/dbone

        MongoCredential credential = MongoCredential
                .createCredential(MongoDBConfig.DB_USERNAME, MongoDBConfig.DB_NAME, MongoDBConfig.DB_PASSWORD.toCharArray());

        MongoClientFactoryBean mongoClientFactoryBean = new MongoClientFactoryBean();
        mongoClientFactoryBean.setHost(MongoDBConfig.DB_HOST);
        mongoClientFactoryBean.setPort(MongoDBConfig.DB_PORT);
        mongoClientFactoryBean.setCredentials(new MongoCredential[] {credential});

        return mongoClientFactoryBean;
    }
}